package problems.algorithms;

import java.util.Arrays;

public class PlusOne {

	public static void main(String[] args) {
		PlusOne po = new PlusOne();
		int[] digits = {9};
		int[] plusOne = po.plusOne(digits);
		System.out.println(Arrays.toString(plusOne));
	}
	/*public int[] plusOne(int[] digits) {
        
	    int n = digits.length;
	    for(int i=n-1; i>=0; i--) {
	        if(digits[i] < 9) {
	            digits[i]++;
	            return digits;
	        }
	        
	        digits[i] = 0;
	    }
	    
	    int[] newNumber = new int [n+1];
	    newNumber[0] = 1;
	    
	    return newNumber;
	}*/
	public int[] plusOne(int[] digits) {
		int length = digits.length;
		if(length == 0) {
			return new int[] {1};
		}
		
		if(digits[length-1] < 9) {
			digits[length-1] = digits[length-1] + 1;
			return digits;
		} else {
			int carry = 1; 
			digits[length-1] = 0;
			for(int i = length-2; i >= 0; i--) {
				if(digits[i] + carry > 9){
					carry = 1;
					digits[i] = 0;
				} else {
					digits[i] = digits[i] + carry;
					carry = 0;
				}
			}
			if(carry == 1) {
				int[] newDigits = new int[length+1];
				newDigits[0] = carry;
				for(int i = 1; i < length+1; i++) {
					newDigits[i] = digits[i-1];
				}

			}
		}
		
		
		return digits;
		
    }
	
	/*public int[] plusOne(int[] digits) {
		if(digits.length == 0 || digits == null) {
			return new int[] {1};
		}
		StringBuffer sb = new StringBuffer();
		for(int i : digits) {
			sb.append(i);
		}
		long plusOne = Long.parseLong(sb.toString()) + 1;
		String newS = Long.toString(plusOne);
		int[] finalInt = new int[newS.length()];
		for(int i = 0; i < newS.length(); i++) {
			finalInt[i] = Integer.parseInt(String.valueOf(newS.charAt(i)));
		}
		return finalInt;
    }*/
}
