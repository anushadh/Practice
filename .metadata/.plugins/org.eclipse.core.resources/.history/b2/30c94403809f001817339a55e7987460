package problems.algorithms;

import java.util.Arrays;

/*136. Single Number
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?*/

public class SingleNumber {

	public static void main(String[] args) {
		SingleNumber sn = new SingleNumber();
		int[] nums = {2,1,1};
		System.out.println(sn.singleNumber(nums));
	}
	
	public int singleNumber(int[] nums) {
        Arrays.sort(nums);
    	int count = 0;
    	int result = 0;
		for(int i = 0; i < nums.length-1; i++) {
/*			System.out.println(nums[i] + " " + nums[i+1]);
			if((i == 0 || i == nums.length-2) && (nums[i] != nums[i+1])) {
				System.out.println("in" + nums[i]);
				return nums[i];
			}*/
        	if(nums[i] != nums[i+1]) {
        		if(i == 0) return nums[i];
        		if(i == nums.length-2) return nums[i+1];
        		count++;
        		if(count == 2) {
        			result = nums[i];
        			break;
        		}
        	} 
        }
		return result;
    }
}
